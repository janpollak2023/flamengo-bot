# tip_engine.py ‚Äî Flamengo v√Ωbƒõr nad Tipsport-first pipeline
# Filtry: jen z√°pasy z Tipsportu, start do 3 hodin, 1‚Äì10 tip≈Ø
from typing import List, Tuple
import time
from flamengo_strategy import MatchFacts, TipCandidate, propose_football_tips
from sources_base import gather_from_sources
from sources_files import TipsportFixturesSource, FixturesSource, UnderstatSource, SofaScoreSource
from tipsport_check import exists_on_tipsport

# ------- Parametry -------
MIN_ODDS = 1.3
MAX_ODDS = 2.9
MAX_ALLOW = 10.0
MIN_CONF_PRIMARY = 20       # hlavn√≠ pr√°h
MIN_CONF_FALLBACK = 20      # nouzov√Ω pr√°h, kdy≈æ nic nespln√≠ 90
KICKOFF_WINDOW_H = 8        # jen z√°pasy, kter√© zaƒçnou do 3 hodin
MAX_COUNT = 10              # vezmeme max. 10 tip≈Ø
STAKE_BASE = 100            # modelov√° vsazen√° ƒç√°stka (Kƒç)

def _odds_pass(odds: float | None) -> bool:
    if odds is None: return True
    if MIN_ODDS <= odds <= MAX_ODDS: return True
    if MAX_ODDS < odds <= MAX_ALLOW: return True
    return False

def _payout(odds: float | None) -> str:
    if not odds: return "‚Äî"
    gross = STAKE_BASE * odds
    net = STAKE_BASE * (odds - 1.0)
    return f"v√Ωplata ~{gross:.0f} Kƒç (zisk ~{net:.0f} Kƒç)"

def _format_line(m: MatchFacts, t: TipCandidate) -> str:
    odds_txt = f" ~{t.est_odds:.2f}" if t.est_odds else ""
    when = time.strftime("%H:%M", time.gmtime(m.ts_utc)) + " UTC"
    return (
        f"üèü {m.league}: {m.home} ‚Äì {m.away} ‚Ä¢ v√Ωkop {when}\n"
        f"‚Ä¢ S√°zka: {t.selection} ‚Äî {t.market_code}{odds_txt}\n"
        f"‚Ä¢ Procenta mo≈æn√© v√Ωhry: {t.confidence}%\n"
        f"‚Ä¢ {_payout(t.est_odds)}\n"
        f"‚ÑπÔ∏è {t.rationale}\n"
    )

def _within_window(ts_utc: int, now: float) -> bool:
    return ts_utc >= now and ts_utc <= now + KICKOFF_WINDOW_H * 3600

def _pick_candidates(matches: List[MatchFacts], min_conf: int) -> List[Tuple[MatchFacts, TipCandidate]]:
    cands: List[Tuple[MatchFacts, TipCandidate]] = []
    for m in matches:
        if m.sport != "football":
            continue
        for t in propose_football_tips(m):
            if t.confidence >= min_conf and _odds_pass(t.est_odds):
                cands.append((m, t))
    return cands

def suggest_today() -> str:
    # 1) Prim√°rnƒõ Tipsport ‚Üí aby ≈°ly vsadit
    matches: List[MatchFacts] = gather_from_sources([
        TipsportFixturesSource(),  # urƒçuj√≠c√≠ mno≈æina
        FixturesSource(),          # doplnƒõk
        UnderstatSource(),         # xG + formy
        SofaScoreSource(),         # karty/rohy/tempo/absence
    ])

    # 2) Jen z√°pasy, kter√© zaƒç√≠naj√≠ do 3 hodin
    now = time.time()
    matches = [m for m in matches if _within_window(m.ts_utc, now)]

    if not matches:
        return f"Do {KICKOFF_WINDOW_H} hodin nem√°m ≈æ√°dn√© z√°pasy v Tipsport nab√≠dce."

    # 3) Flamengo kandid√°ti s hlavn√≠m prahem
    cands = _pick_candidates(matches, MIN_CONF_PRIMARY)

    # 4) Druh√© ovƒõ≈ôen√≠ Tipsportu (pro jistotu)
    verified: List[Tuple[MatchFacts, TipCandidate]] = []
    for m, t in cands:
        if exists_on_tipsport(m.league, m.home, m.away, m.ts_utc):
            verified.append((m, t))

    # 5) Pokud nic, zkus fallback ‚â•85 % (po≈ô√°d jen do 3 hodin)
    used_fallback = False
    if not verified:
        cands_fb = _pick_candidates(matches, MIN_CONF_FALLBACK)
        for m, t in cands_fb:
            if exists_on_tipsport(m.league, m.home, m.away, m.ts_utc):
                verified.append((m, t))
        used_fallback = bool(verified)

    if not verified:
        return (
            f"V Tipsport nab√≠dce do {KICKOFF_WINDOW_H} h teƒè nic nesplnilo ani {MIN_CONF_FALLBACK}% "
            f"v kurzech {MIN_ODDS}‚Äì{MAX_ODDS} (v√Ωjimeƒçnƒõ ‚â§ {MAX_ALLOW})."
        )

    # 6) Se≈ôadit: d≈Øvƒõra ‚Üì, kurz ‚Üë (preferuj ni≈æ≈°√≠), v√Ωkop ‚Üë
    verified.sort(key=lambda mt: (-mt[1].confidence, mt[1].est_odds or 99.0, mt[0].ts_utc))

    # 7) Omezit na 1‚Äì10 tip≈Ø
    shown = verified[:MAX_COUNT]

    # 8) V√Ωstup
    header = "üîé Dne≈°n√≠ TOP n√°vrhy (Tipsport ‚Üí Flamengo, v√Ωkop ‚â§ 3 h)\n"
    if used_fallback:
        header += f"‚ö†Ô∏è Pou≈æit fallback ‚â•{MIN_CONF_FALLBACK} % (≈æ√°dn√Ω tip nesplnil {MIN_CONF_PRIMARY} %).\n\n"
    else:
        header += f"‚úÖ V≈°e s ‚â•{MIN_CONF_PRIMARY} % d≈Øvƒõrou.\n\n"

    lines = [_format_line(m, t) for m, t in shown]
    tail = (
        f"Pravidla Flamengo: fakta (xG/forma/tempo), filtr kurz≈Ø {MIN_ODDS}‚Äì{MAX_ODDS} "
        f"(v√Ωjimeƒçnƒõ a≈æ do {MAX_ALLOW}). Vstup = z√°pasy dostupn√© na Tipsportu."
    )
    return header + "\n".join(lines) + "\n" + tail
    # tip_engine.py
def odds_pass(odds: float | None) -> bool:
    if odds is None:
        return True            # nezn√°m√Ω kurz nefiltruj
    if odds < MIN_ODDS:        # 1.3 default
        return False
    if odds > MAX_ALLOW:       # 10.0 hard stop
        return False
    return odds <= MAX_ODDS    # 2.9 default c√≠lov√© p√°smo
# tip_engine.py (doslova vlo≈æ na konec souboru)
from urls import get_url
from scraper import get_match_list, tipsport_stats
from analyzer import TeamStats
from flamengo_strategy import propose_football_tips  # m√°≈° u≈æ v importech

def run_pipeline(sport: str = "fotbal", minconf: int = 85, window_h: int = 8, max_count: int = 10):
    """
    Prim√°rnƒõ: pou≈æij gather_from_sources (tv√© zdroje, okno startu do window_h).
    Fallback: projdi Tipsport kategorii, vezmi ~12 z√°pas≈Ø a udƒõlej rychlou anal√Ωzu on-the-fly.
    Vrac√≠ list TipCandidate / dict s poli: market_label, confidence_pct, bucket, reason.
    """
    tips: list = []

    # 1) Prim√°rn√≠ cesta ‚Äì tvoje pipeline
    try:
        # tvoje funkce/typy ‚Äì dr≈æ√≠m se n√°zv≈Ø z hlaviƒçky souboru:
        sources = [TipsportFixturesSource(), FixturesSource(), UnderstatSource(), SofaScoreSource()]
        facts: List[MatchFacts] = gather_from_sources(sources, window_hours=window_h)
        for mf in facts:
            # existuje na Tipsportu a kurzy OK?
            if not exists_on_tipsport(mf): 
                continue
            if not odds_pass(getattr(mf, "odds", None)):
                continue
            cand: TipCandidate | None = propose_football_tips(mf)
            if not cand:
                continue
            if getattr(cand, "confidence", 0) < minconf:
                continue
            tips.append(cand)
            if len(tips) >= max_count:
                return tips
    except Exception:
        pass  # spadlo? nevad√≠, jedeme fallback

    if tips:
        return tips

    # 2) Fallback ‚Äì on-the-fly p≈ôes Tipsport a rychl√© TeamStats (mock mapov√°n√≠)
    try:
        url = get_url(sport)
        matches = (get_match_list(url) or [])[:12]
        for m in matches:
            try:
                ts = tipsport_stats(m["url"])
                # TODO: namapuj ts -> TeamStats (zat√≠m bezpeƒçn√Ω mock, a≈• to jede)
                home = TeamStats(form5_pts=10, gf_pg=2.0, ga_pg=1.0, first_half_goal_rate=65, btts_rate=55, injuries_key=0, home_adv=True)
                away = TeamStats(form5_pts=6,  gf_pg=1.2, ga_pg=1.6, first_half_goal_rate=55, btts_rate=50, injuries_key=1, home_adv=False)
                h2h  = {"1H_rate": 60, "btts_rate": 55}
                picks = make_picks(home, away, h2h) or []
                for p in picks:
                    if p.get("confidence_pct", 0) >= minconf:
                        tips.append(p)
                        if len(tips) >= max_count:
                            return tips
            except Exception:
                continue
    except Exception:
        pass

    return tips
