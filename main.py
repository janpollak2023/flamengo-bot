# main.py
import os
import json
import time
import hmac
import hashlib
import logging
import threading
import asyncio
from datetime import datetime

from flask import Flask, request, jsonify, abort

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --------------------
# Konfigurace & logging
# --------------------
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("kiki-bot")

TOKEN = os.getenv("TELEGRAM_TOKEN")  # povinn√©
PUBLIC_URL = os.getenv("PUBLIC_URL")  # povinn√© (nap≈ô. https://flamengo-bot.onrender.com)
TELEGRAM_SECRET = os.getenv("TELEGRAM_SECRET", "")  # doporuƒçeno
SECRET_PATH = os.getenv("SECRET_PATH", "webhook")  # nap≈ô. n√°hodn√Ω ≈ôetƒõzec

if not TOKEN or not PUBLIC_URL:
    log.error("Chyb√≠ TELEGRAM_TOKEN nebo PUBLIC_URL v env!")
    # Nezastavujeme proces, aby Render uk√°zal logy/healthz, ale bot nebude funkƒçn√≠.

# --------------------
# Flask app
# --------------------
app = Flask(__name__)

# --------------------
# Async event loop na pozad√≠ pro PTB
# --------------------
loop = asyncio.new_event_loop()
thread = threading.Thread(target=loop.run_forever, name="kiki-loop", daemon=True)
thread.start()

# --------------------
# Telegram Application (PTB v21+)
# --------------------
tg_app: Application = Application.builder().token(TOKEN).build() if TOKEN else None


# --------------------
# Command handlers
# --------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(
        "Ahoj, tady Kiki ü§ñ\nJsem p≈ôipraven√°. Zkus /status, /tip, /tip24 nebo /debug."
    )


async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    wb = await context.bot.get_webhook_info()
    parts = [
        f"‚è± {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC",
        f"üåê PUBLIC_URL: {PUBLIC_URL}",
        f"üõ£  SECRET_PATH: /{SECRET_PATH}",
        f"üîó Webhook URL (na boku Telegramu): {wb.url or '‚Äî'}",
        f"üì¨ Pending updates: {wb.pending_update_count}",
        f"üîí Has custom cert: {wb.has_custom_certificate}",
        f"üö¶ Last error date: {wb.last_error_date or '‚Äî'}",
        f"‚ö†Ô∏è Last error msg: {wb.last_error_message or '‚Äî'}",
        "‚úÖ Aplikace bƒõ≈æ√≠.",
    ]
    await update.effective_chat.send_message("\n".join(parts))


async def cmd_tip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Placeholder ‚Äì sem pak p≈ôid√°me napojen√≠ na tvoje analyz√©ry/endpointy
    await update.effective_chat.send_message(
        "üéØ /tip ‚Äì demo odpovƒõƒè.\nZat√≠m bez napojen√≠ na Tipsport scraping.\n"
        "Po≈°li mi specifikaci (sport, soutƒõ≈æ, trh) nebo pou≈æij /tip24.",
        parse_mode=ParseMode.HTML,
    )


async def cmd_tip24(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(
        "üóì /tip24 ‚Äì demo: vr√°t√≠m pr√°zdn√Ω seznam. "
        "A≈æ napoj√≠me zdroje, po≈°lu 2√ó Bezpeƒç√≠ + 2√ó Risk dle Flamengo.",
    )


async def cmd_debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.effective_message.text or ""
    payload = text.split(maxsplit=1)[1] if " " in text else "(bez payloadu)"
    await update.effective_chat.send_message(
        f"üîç DEBUG OK\npayload: <code>{payload}</code>", parse_mode=ParseMode.HTML
    )


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # fallback na voln√Ω text
    await update.effective_chat.send_message(
        "üëã Zkus p≈ô√≠kazy: /start /status /tip /tip24 /debug"
    )


# --------------------
# Registrace handler≈Ø
# --------------------
if tg_app:
    tg_app.add_handler(CommandHandler("start", cmd_start))
    tg_app.add_handler(CommandHandler("status", cmd_status))
    tg_app.add_handler(CommandHandler("tip", cmd_tip))
    tg_app.add_handler(CommandHandler("tip24", cmd_tip24))
    tg_app.add_handler(CommandHandler("debug", cmd_debug))
    tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))


# --------------------
# Webhook setup
# --------------------
async def _startup():
    if not tg_app:
        return
    await tg_app.initialize()
    # Spust√≠ intern√≠ job queue/dispatcher, ale NESP√çN√Å vlastn√≠ server
    await tg_app.start()
    # Nastav√≠ webhook u Telegramu na n√°≈° Flask endpoint
    url = f"{PUBLIC_URL.rstrip('/')}/{SECRET_PATH}"
    try:
        await tg_app.bot.set_webhook(
            url=url,
            secret_token=TELEGRAM_SECRET if TELEGRAM_SECRET else None,
            drop_pending_updates=True,
        )
        log.info(f"Webhook nastaven na: {url}")
    except Exception:
        log.exception("Nepoda≈ôilo se nastavit webhook.")


# pl√°n startu PTB v bƒõ≈æ√≠c√≠m loopu
if tg_app:
    asyncio.run_coroutine_threadsafe(_startup(), loop)


# --------------------
# Bezpeƒçnostn√≠ pomocn√© funkce
# --------------------
def _check_secret_header(req) -> bool:
    """Voliteln√° validace Telegram headeru (X-Telegram-Bot-Api-Secret-Token)."""
    if not TELEGRAM_SECRET:
        return True  # kdy≈æ nen√≠ nastaveno, nevalidujeme
    return req.headers.get("X-Telegram-Bot-Api-Secret-Token") == TELEGRAM_SECRET


# --------------------
# Flask routes
# --------------------
@app.get("/")
def root():
    return jsonify(
        name="Kiki tipy bot",
        ok=True,
        time_utc=datetime.utcnow().isoformat() + "Z",
        webhook=f"/{SECRET_PATH}",
    )


@app.get("/healthz")
def healthz():
    status = {
        "ok": True,
        "time_utc": datetime.utcnow().isoformat() + "Z",
        "has_token": bool(TOKEN),
        "public_url": PUBLIC_URL,
        "secret_path": f"/{SECRET_PATH}",
        "thread_alive": thread.is_alive(),
    }
    return jsonify(status), 200


@app.post(f"/{SECRET_PATH}")
def webhook():
    if not tg_app:
        log.error("Webhook hit, ale tg_app nen√≠ inicializov√°na.")
        return ("bot not ready", 503)

    if not _check_secret_header(request):
        log.warning("Webhook: ≈°patn√Ω/nep≈ô√≠tomn√Ω secret header.")
        abort(401)

    try:
        data = request.get_json(force=True, silent=False)
    except Exception:
        log.exception("Webhook: nevalidn√≠ JSON.")
        abort(400)

    try:
        update = Update.de_json(data, tg_app.bot)
    except Exception:
        log.exception("Webhook: Update.de_json selhal.")
        abort(400)

    # p≈ôedat update do PTB v na≈°em event loopu
    fut = asyncio.run_coroutine_threadsafe(tg_app.process_update(update), loop)
    try:
        # Neblokujeme dlouho ‚Äì jen ovƒõ≈ô√≠me, ≈æe se task za≈ôadil
        fut.result(timeout=0.25)
    except Exception:
        # Je to ok ‚Äì PTB si to zpracuje asynchronnƒõ; nechceme 5xx kv≈Øli timeoutu
        pass

    return ("ok", 200)


# --------------------
# Lok√°ln√≠ v√Ωvoj (python main.py)
# --------------------
if __name__ == "__main__":
    # Pro lok√°ln√≠ test bez gunicornu
    port = int(os.getenv("PORT", "8000"))
    log.info(f"Start Flask dev serveru na :{port}")
    app.run(host="0.0.0.0", port=port)
