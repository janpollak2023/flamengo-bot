# main.py ‚Äî Flask + python-telegram-bot 21.6 (Render-ready)
# P≈ô√≠kazy:
# /status ‚Äì rychl√Ω test
# /scan [fotbal|hokej|tenis|basket|esport] ‚Äì vyp√≠≈°e top z√°pasy z Tipsportu
# /analyze <URL_z√°pasu_z_Tipsportu> ‚Äì st√°hne fakta a vr√°t√≠ Flamengo tipy
# /tip [sport=fotbal minconf=85 window=8 count=10] ‚Äì spust√≠ intern√≠ pipeline a vr√°t√≠ shortlist
# /debug ‚Äì info o webhooku/pollingu

from __future__ import annotations
import os
import logging
import asyncio
from typing import Dict

from flask import Flask, request

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# ====== intern√≠ moduly ======
from urls import get_url, categories
from markets import FOOTBALL_MARKETS         # (import se hod√≠, i kdy≈æ se zde p≈ô√≠mo nepou≈æije)
from scraper import get_match_list, tipsport_stats
from picks import make_picks
from analyzer import TeamStats

# --------- Logov√°n√≠ ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s"
)
log = logging.getLogger("flamengo-main")

# --------- Flask -------------
app = Flask(__name__)

# --------- Env promƒõnn√© ------
TOKEN       = os.getenv("TELEGRAM_TOKEN", "")
PUBLIC_URL  = os.getenv("PUBLIC_URL", "")              # nap≈ô. https://flamengo-bot.onrender.com
SECRET_PATH = os.getenv("SECRET_PATH", "webhook")      # endpoint pro Telegram
MODE        = os.getenv("MODE", "webhook").lower()     # "webhook" (Render) nebo "polling" (lok√°lnƒõ)

# --------- Telegram Application ----------
if not TOKEN:
    log.warning("‚ö†Ô∏è  TELEGRAM_TOKEN nen√≠ nastaven!")

application = Application.builder().token(TOKEN).build()

# ===================== Pomocn√© funkce =====================

def _parse_kv(args: list[str]) -> Dict[str, str]:
    """
    P≈ôevede parametry ve tvaru key=value na dict (case-insensitive na key).
    """
    out: Dict[str, str] = {}
    for a in args:
        if "=" in a:
            k, v = a.split("=", 1)
            out[k.lower()] = v
    return out

# ===================== Handlery p≈ô√≠kaz≈Ø =====================

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ Kiki bƒõ≈æ√≠. Po≈°li /scan nebo /analyze <url> nebo /tip")

async def cmd_scan(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """Vyt√°hne top z√°pasy pro zadanou kategorii (default fotbal) z ulo≈æen√Ωch URL."""
    cat = (ctx.args[0] if ctx.args else "fotbal").lower()
    url = get_url(cat)
    try:
        lst = (get_match_list(url) or [])[:12]
    except Exception as e:
        log.exception("get_match_list selhal")
        return await update.message.reply_text(f"‚ùå Chyba naƒç√≠t√°n√≠ z√°pas≈Ø: {e}")

    if not lst:
        return await update.message.reply_text(f"Top z√°pasy *{cat}*: Nic nenalezeno.", parse_mode="Markdown")

    lines = [f"{i+1}. {x.get('title','(bez n√°zvu)')} ‚Äî {x.get('url','')}" for i, x in enumerate(lst)]
    await update.message.reply_text(f"Top z√°pasy *{cat}*:\n" + "\n".join(lines), parse_mode="Markdown")

async def cmd_analyze(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    Anal√Ωza z√°pasu ‚Äì st√°hne Tipsport statistiky a provede v√Ωbƒõr tip≈Ø.
    Pou≈æit√≠: /analyze https://m.tipsport.cz/kurzy/zapas/...
    """
    match_url = " ".join(ctx.args).strip()
    if not match_url:
        return await update.message.reply_text(
            "Po≈°li URL z√°pasu z Tipsportu. P≈ô√≠klad:\n/analyze https://m.tipsport.cz/kurzy/zapas/...",
        )

    try:
        ts = tipsport_stats(match_url)  # m≈Ø≈æe vracet dict/raw
    except Exception as e:
        log.exception("tipsport_stats selhal")
        return await update.message.reply_text(f"‚ùå Chyba naƒç√≠t√°n√≠ statistik: {e}")

    # --- mock p≈ôevod -> TeamStats (zat√≠m fixn√≠ p≈ô√≠klad; pozdƒõji mapuj p≈ô√≠mo z ts)
    home = TeamStats(
        form5_pts=10, gf_pg=2.1, ga_pg=0.9,
        first_half_goal_rate=72, btts_rate=58,
        injuries_key=0, home_adv=True,
    )
    away = TeamStats(
        form5_pts=5, gf_pg=1.2, ga_pg=1.6,
        first_half_goal_rate=61, btts_rate=55,
        injuries_key=1, home_adv=False,
    )
    h2h = {"1h_rate": 68, "btts_rate": 60}  # p≈ô√≠kladov√© hodnoty

    try:
        picks = make_picks(home, away, h2h) or []
    except Exception as e:
        log.exception("make_picks selhal")
        return await update.message.reply_text(f"‚ùå Chyba p≈ôi v√Ωbƒõru tip≈Ø: {e}")

    if not picks:
        return await update.message.reply_text("SKIP ‚Äì nic ‚â• 80 %.")

    lines = [
        f"‚Ä¢ {p['market_label']} ‚Üí {p['confidence_pct']}% [{p['bucket']}]\nD≈Øvod: {p['reason']}"
        for p in picks
    ]
    await update.message.reply_text("\n\n".join(lines))

async def cmd_tip(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    Spu≈°tƒõn√≠ intern√≠ pipeline s parametry:
    /tip sport=fotbal minconf=85 window=8 count=10
    """
    kv = _parse_kv(ctx.args)
    sport  = kv.get("sport", "fotbal").lower()
    minconf = int(kv.get("minconf", "85"))
    window  = int(kv.get("window",  "8"))
    count   = int(kv.get("count",   "10"))

    # run_pipeline je v tip_engine.py ‚Äì pokud ho pou≈æ√≠v√°≈°, naimportuj; zde vol√°me make_picks p≈ôes scan/analyze flow.
    await update.message.reply_text(f"üîé Hled√°m z√°pasy‚Ä¶ (anal√Ωza + kontrola Tipsportu)\n"
                                    f"sport={sport}, minconf={minconf}, window={window}, count={count}")

    # Zde m≈Ø≈æe≈° pozdƒõji doplnit skuteƒçn√Ω orchestr√°tor (scan -> stats -> picks).
    # Prozat√≠m vr√°t√≠me info, pokud nic nen√≠ nad prahem:
    return await update.message.reply_text("‚ÑπÔ∏è Nic nad prahem d≈Øvƒõry. Zkus upravit parametry (nap≈ô. minconf=80).")

async def cmd_debug(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # Shrnut√≠ re≈æimu + info o webhooku
    info = await application.bot.get_webhook_info()
    txt = (
        f"*MODE:* `{MODE}`\n"
        f"*Webhook URL:* `{info.url or '-'}`\n"
        f"*Has pending:* `{info.has_custom_certificate}`\n"
        f"*IP:* `{info.ip_address or '-'}`\n"
        f"*Max conn:* `{info.max_connections}`\n"
        f"*Pending updates:* `{info.pending_update_count}`\n"
    )
    await update.message.reply_text(txt, parse_mode="Markdown")

# Registrace handler≈Ø
application.add_handler(CommandHandler("status",  cmd_status))
application.add_handler(CommandHandler("scan",    cmd_scan))
application.add_handler(CommandHandler("analyze", cmd_analyze))
application.add_handler(CommandHandler("tip",     cmd_tip))
application.add_handler(CommandHandler("debug",   cmd_debug))

# ===================== Flask routy =====================

@app.get("/healthz")
def healthz():
    return "OK", 200

@app.get("/")
def root():
    return "flamengo-bot bƒõ≈æ√≠", 200

@app.post(f"/{SECRET_PATH}")
def telegram_webhook():
    """Telegram webhook ‚Äî PTB 21.* zpracov√°n√≠ p≈ô√≠choz√≠ho Update."""
    try:
        update = Update.de_json(request.get_json(force=True), application.bot)
        application.update_queue.put_nowait(update)
    except Exception as e:
        log.exception("Webhook processing error")
        return f"ERR: {e}", 500
    return "OK", 200

# ===================== Start =====================

def setup_webhook():
    """
    Nastav√≠ webhook na PUBLIC_URL/{SECRET_PATH}.
    Mus√≠ b√Ωt nastaven√© PUBLIC_URL, jinak nebude fungovat.
    """
    if not PUBLIC_URL:
        log.warning("‚ö†Ô∏è  PUBLIC_URL nen√≠ nastaven = webhook nep≈Øjde nastavit.")
        return
    url = f"{PUBLIC_URL.rstrip('/')}/{SECRET_PATH}"
    asyncio.run(application.bot.set_webhook(url=url))
    log.info(f"‚úÖ Webhook nastaven: {url}")

if __name__ == "__main__":
    if MODE == "polling":
        log.info("‚ñ∂Ô∏è  Start POLLING re≈æimu")
        application.run_polling(drop_pending_updates=True)
    else:
        # Render / produkce ‚Äì webhook
        if TOKEN and PUBLIC_URL:
            setup_webhook()
        port = int(os.getenv("PORT", "5000"))
        log.info(f"üåê Flask start na portu {port} (webhook: /{SECRET_PATH})")
        app.run(host="0.0.0.0", port=port)
